// NOTE: Commands taken from TelemetryHelper.h
val String fileName = "cylights.rules"
val String controlChannel = "cylights/control"
var String jsonString = ""
var String cmd = ""
val actionsBroker = getActions("mqtt", "mqtt:broker:mosquitto")

rule "Send System Command"
when
    Item CyLightsSystemCommand changed
then
    cmd = CyLightsSystemCommand.state.toString()
    switch(cmd) {
        case "Disable":
            jsonString = "{\"client_id\":\"CYLIGHTS\",\"command\":0}"
        case "Enable":
            jsonString = "{\"client_id\":\"CYLIGHTS\",\"command\":1}"
        case "Reboot":
            jsonString = "{\"client_id\":\"CYLIGHTS\",\"command\":2}"
        case "Request Status":
            jsonString = "{\"client_id\":\"CYLIGHTS\",\"command\":3}"
    }

    logInfo(fileName, "Publishing MQTT Payload: " + jsonString)
    actionsBroker.publishMQTT(controlChannel, jsonString)
    CyLightsSystemCommand.postUpdate(NULL)
end

rule "Turn Light1 On/Off"
when
    Item CyLights_Light1Switch changed
then
    if (CyLights_Light1Switch.state == ON) {
        jsonString = "{\"client_id\":\"CYLIGHTS\",\"command\":4}"
    }
    else {
        jsonString = "{\"client_id\":\"CYLIGHTS\",\"command\":5}"
    }

    logInfo(fileName, "Publishing MQTT Payload: " + jsonString)
    actionsBroker.publishMQTT(controlChannel, jsonString)
end

rule "Turn Light2 On/Off"
when
    Item CyLights_Light2Switch changed
then
    if (CyLights_Light2Switch.state == ON) {
        jsonString = "{\"client_id\":\"CYLIGHTS\",\"command\":6}"
    }
    else {
        jsonString = "{\"client_id\":\"CYLIGHTS\",\"command\":7}"
    }

    logInfo(fileName, "Publishing MQTT Payload: " + jsonString)
    actionsBroker.publishMQTT(controlChannel, jsonString)
end

rule "Turn Light3 On/Off"
when
    Item CyLights_Light3Switch changed
then
    if (CyLights_Light3Switch.state == ON) {
        jsonString = "{\"client_id\":\"CYLIGHTS\",\"command\":8}"
    }
    else {
        jsonString = "{\"client_id\":\"CYLIGHTS\",\"command\":9}"
    }

    logInfo(fileName, "Publishing MQTT Payload: " + jsonString)
    actionsBroker.publishMQTT(controlChannel, jsonString)
end

rule "Turn Light4 On/Off"
when
    Item CyLights_Light4Switch changed
then
    if (CyLights_Light4Switch.state == ON) {
        jsonString = "{\"client_id\":\"CYLIGHTS\",\"command\":10}"
    }
    else {
        jsonString = "{\"client_id\":\"CYLIGHTS\",\"command\":11}"
    }

    logInfo(fileName, "Publishing MQTT Payload: " + jsonString)
    actionsBroker.publishMQTT(controlChannel, jsonString)
end

rule "Turn Light5 On/Off"
when
    Item CyLights_Light5Switch changed
then
    if (CyLights_Light5Switch.state == ON) {
        jsonString = "{\"client_id\":\"CYLIGHTS\",\"command\":12}"
    }
    else {
        jsonString = "{\"client_id\":\"CYLIGHTS\",\"command\":13}"
    }

    logInfo(fileName, "Publishing MQTT Payload: " + jsonString)
    actionsBroker.publishMQTT(controlChannel, jsonString)
end

rule "Turn All Lights On/Off"
when
    Item CyLightsAllSwitch changed
then
    if (CyLightsAllSwitch.state == ON) {
        jsonString = "{\"client_id\":\"CYLIGHTS\",\"command\":14}"
    }
    else {
        jsonString = "{\"client_id\":\"CYLIGHTS\",\"command\":15}"
    }

    logInfo(fileName, "Publishing MQTT Payload: " + jsonString)
    actionsBroker.publishMQTT(controlChannel, jsonString)
end